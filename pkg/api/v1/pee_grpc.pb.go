// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeeServiceClient is the client API for PeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeeServiceClient interface {
	// StartLocalDcim starts a Data Center Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the pee/config.yaml
	//   3. all bytes constituting the Data Center Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDcim(ctx context.Context, opts ...grpc.CallOption) (PeeService_StartLocalDcimClient, error)
	// StartFromPreviousDcim starts a new Data Center Infrastructure Manager based on a previous one.
	// If the previous Data Center Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDcim(ctx context.Context, in *StartFromPreviousDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error)
	// StartDcimRequest starts a new Data Center Infrastructure Manager based on its specification.
	StartDcim(ctx context.Context, in *StartDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error)
	// Searches for Data Center Infrastructure Manager(s) known to this instance
	ListDcims(ctx context.Context, in *ListDcimsRequest, opts ...grpc.CallOption) (*ListDcimsResponse, error)
	// Subscribe listens to new Data Center Infrastructure Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PeeService_SubscribeClient, error)
	// GetDcim retrieves details of a single Data Center Infrastructure Manager
	GetDcim(ctx context.Context, in *GetDcimRequest, opts ...grpc.CallOption) (*GetDcimResponse, error)
	// Listen listens to Data Center Infrastructure Manager updates and log output of a running Data Center Infrastructure Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PeeService_ListenClient, error)
	// StopDcim stops a currently running Data Center Infrastructure Manager
	StopDcim(ctx context.Context, in *StopDcimRequest, opts ...grpc.CallOption) (*StopDcimResponse, error)
}

type peeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeeServiceClient(cc grpc.ClientConnInterface) PeeServiceClient {
	return &peeServiceClient{cc}
}

func (c *peeServiceClient) StartLocalDcim(ctx context.Context, opts ...grpc.CallOption) (PeeService_StartLocalDcimClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeeService_ServiceDesc.Streams[0], "/v1.PeeService/StartLocalDcim", opts...)
	if err != nil {
		return nil, err
	}
	x := &peeServiceStartLocalDcimClient{stream}
	return x, nil
}

type PeeService_StartLocalDcimClient interface {
	Send(*StartLocalDcimRequest) error
	CloseAndRecv() (*StartDcimResponse, error)
	grpc.ClientStream
}

type peeServiceStartLocalDcimClient struct {
	grpc.ClientStream
}

func (x *peeServiceStartLocalDcimClient) Send(m *StartLocalDcimRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peeServiceStartLocalDcimClient) CloseAndRecv() (*StartDcimResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDcimResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peeServiceClient) StartFromPreviousDcim(ctx context.Context, in *StartFromPreviousDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error) {
	out := new(StartDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeService/StartFromPreviousDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeServiceClient) StartDcim(ctx context.Context, in *StartDcimRequest, opts ...grpc.CallOption) (*StartDcimResponse, error) {
	out := new(StartDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeService/StartDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeServiceClient) ListDcims(ctx context.Context, in *ListDcimsRequest, opts ...grpc.CallOption) (*ListDcimsResponse, error) {
	out := new(ListDcimsResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeService/ListDcims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PeeService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeeService_ServiceDesc.Streams[1], "/v1.PeeService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &peeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeeService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type peeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *peeServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peeServiceClient) GetDcim(ctx context.Context, in *GetDcimRequest, opts ...grpc.CallOption) (*GetDcimResponse, error) {
	out := new(GetDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeService/GetDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PeeService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeeService_ServiceDesc.Streams[2], "/v1.PeeService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &peeServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeeService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type peeServiceListenClient struct {
	grpc.ClientStream
}

func (x *peeServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peeServiceClient) StopDcim(ctx context.Context, in *StopDcimRequest, opts ...grpc.CallOption) (*StopDcimResponse, error) {
	out := new(StopDcimResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeService/StopDcim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeServiceServer is the server API for PeeService service.
// All implementations must embed UnimplementedPeeServiceServer
// for forward compatibility
type PeeServiceServer interface {
	// StartLocalDcim starts a Data Center Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the pee/config.yaml
	//   3. all bytes constituting the Data Center Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDcim(PeeService_StartLocalDcimServer) error
	// StartFromPreviousDcim starts a new Data Center Infrastructure Manager based on a previous one.
	// If the previous Data Center Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDcim(context.Context, *StartFromPreviousDcimRequest) (*StartDcimResponse, error)
	// StartDcimRequest starts a new Data Center Infrastructure Manager based on its specification.
	StartDcim(context.Context, *StartDcimRequest) (*StartDcimResponse, error)
	// Searches for Data Center Infrastructure Manager(s) known to this instance
	ListDcims(context.Context, *ListDcimsRequest) (*ListDcimsResponse, error)
	// Subscribe listens to new Data Center Infrastructure Manager(s) updates
	Subscribe(*SubscribeRequest, PeeService_SubscribeServer) error
	// GetDcim retrieves details of a single Data Center Infrastructure Manager
	GetDcim(context.Context, *GetDcimRequest) (*GetDcimResponse, error)
	// Listen listens to Data Center Infrastructure Manager updates and log output of a running Data Center Infrastructure Manager
	Listen(*ListenRequest, PeeService_ListenServer) error
	// StopDcim stops a currently running Data Center Infrastructure Manager
	StopDcim(context.Context, *StopDcimRequest) (*StopDcimResponse, error)
	mustEmbedUnimplementedPeeServiceServer()
}

// UnimplementedPeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeeServiceServer struct {
}

func (UnimplementedPeeServiceServer) StartLocalDcim(PeeService_StartLocalDcimServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDcim not implemented")
}
func (UnimplementedPeeServiceServer) StartFromPreviousDcim(context.Context, *StartFromPreviousDcimRequest) (*StartDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDcim not implemented")
}
func (UnimplementedPeeServiceServer) StartDcim(context.Context, *StartDcimRequest) (*StartDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDcim not implemented")
}
func (UnimplementedPeeServiceServer) ListDcims(context.Context, *ListDcimsRequest) (*ListDcimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDcims not implemented")
}
func (UnimplementedPeeServiceServer) Subscribe(*SubscribeRequest, PeeService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPeeServiceServer) GetDcim(context.Context, *GetDcimRequest) (*GetDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDcim not implemented")
}
func (UnimplementedPeeServiceServer) Listen(*ListenRequest, PeeService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedPeeServiceServer) StopDcim(context.Context, *StopDcimRequest) (*StopDcimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDcim not implemented")
}
func (UnimplementedPeeServiceServer) mustEmbedUnimplementedPeeServiceServer() {}

// UnsafePeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeeServiceServer will
// result in compilation errors.
type UnsafePeeServiceServer interface {
	mustEmbedUnimplementedPeeServiceServer()
}

func RegisterPeeServiceServer(s grpc.ServiceRegistrar, srv PeeServiceServer) {
	s.RegisterService(&PeeService_ServiceDesc, srv)
}

func _PeeService_StartLocalDcim_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeeServiceServer).StartLocalDcim(&peeServiceStartLocalDcimServer{stream})
}

type PeeService_StartLocalDcimServer interface {
	SendAndClose(*StartDcimResponse) error
	Recv() (*StartLocalDcimRequest, error)
	grpc.ServerStream
}

type peeServiceStartLocalDcimServer struct {
	grpc.ServerStream
}

func (x *peeServiceStartLocalDcimServer) SendAndClose(m *StartDcimResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peeServiceStartLocalDcimServer) Recv() (*StartLocalDcimRequest, error) {
	m := new(StartLocalDcimRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PeeService_StartFromPreviousDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeServiceServer).StartFromPreviousDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeService/StartFromPreviousDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeServiceServer).StartFromPreviousDcim(ctx, req.(*StartFromPreviousDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeService_StartDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeServiceServer).StartDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeService/StartDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeServiceServer).StartDcim(ctx, req.(*StartDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeService_ListDcims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDcimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeServiceServer).ListDcims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeService/ListDcims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeServiceServer).ListDcims(ctx, req.(*ListDcimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeeServiceServer).Subscribe(m, &peeServiceSubscribeServer{stream})
}

type PeeService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type peeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *peeServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PeeService_GetDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeServiceServer).GetDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeService/GetDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeServiceServer).GetDcim(ctx, req.(*GetDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeeServiceServer).Listen(m, &peeServiceListenServer{stream})
}

type PeeService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type peeServiceListenServer struct {
	grpc.ServerStream
}

func (x *peeServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PeeService_StopDcim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDcimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeServiceServer).StopDcim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeService/StopDcim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeServiceServer).StopDcim(ctx, req.(*StopDcimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeeService_ServiceDesc is the grpc.ServiceDesc for PeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PeeService",
	HandlerType: (*PeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDcim",
			Handler:    _PeeService_StartFromPreviousDcim_Handler,
		},
		{
			MethodName: "StartDcim",
			Handler:    _PeeService_StartDcim_Handler,
		},
		{
			MethodName: "ListDcims",
			Handler:    _PeeService_ListDcims_Handler,
		},
		{
			MethodName: "GetDcim",
			Handler:    _PeeService_GetDcim_Handler,
		},
		{
			MethodName: "StopDcim",
			Handler:    _PeeService_StopDcim_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDcim",
			Handler:       _PeeService_StartLocalDcim_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _PeeService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _PeeService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pee.proto",
}
